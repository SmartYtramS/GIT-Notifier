1c1
< #! /usr/bin/env python
---
> #!/usr/bin/env python
11a12,24
> import smtplib
> from re import sub as re_sub, search as re_search
> from email.mime.multipart import MIMEMultipart
> from email.mime.text import MIMEText
> 
> try:
>     from pygments import highlight
>     from pygments.lexers import DiffLexer
>     from pygments.formatters import HtmlFormatter
>     pygments_available = True
> except ImportError:
>     pygments_available = False
> 
16c29,30
< Separator = "\n>---------------------------------------------------------------\n"
---
> Separator = "\n>%s\n" % ('-' * 62)
> Separhtml = "<hr>"
19a34
> 
26c41,44
<     ("allchanges", True, set(), "branches for which *all* changes are to be reported"),
---
>     ("allchanges", True, set(),
>      "branches for which *all* changes are to be reported"),
>     ("altsubject", False, False,
>      "enables alternative subject with repository name"),
30c48,49
<     ("hostname", True, socket.gethostname(), "host where the repository is hosted"),
---
>     ("hostname", True, socket.gethostname(),
>      "host where the repository is hosted"),
33c52,57
<     ("manual", True, None, "notifiy for a manually given set of revisions"),
---
>     ("smtpserver", True, 'localhost', "tells SMTP server to use, host only"),
>     ("smtpport", True, 25, "sets SMTP port for SMTP server"),
>     ("smtplogin", True, None, "sets login for SMTP AUTH"),
>     ("smtppassword", True, None, "sets password for SMTP AUTH"),
>     ("smtpssl", False, False, "enables SSL for SMTP"),
>     ("manual", True, None, "notify for a manually given set of revisions"),
34a59
>     ("colordiff", False, False, "colorize diffs using pygments library"),
38c63,64
<     ("link", True, None, "Link to insert into mail, %s will be replaced with revision"),
---
>     ("link", True, None,
>      "Link to insert into mail, %s will be replaced with revision"),
42c68,69
<     ("mergediffs", True, set(), "branches for which complete merge diffs are to be included"),
---
>     ("mergediffs", True, set(),
>      "branches for which complete merge diffs are to be included"),
45c72,76
< class State:
---
> 
> class State(object):
>     '''
>     State class
>     '''
49a81,83
>         '''
>         Clear data structures
>         '''
57a92,94
>         '''
>         Write to cache file
>         '''
80a118,120
>         '''
>         Read from cache file
>         '''
112c152,155
< class GitConfig:
---
> class GitConfig(object):
>     '''
>     GitConfig class
>     '''
118c161,162
<             self.allchanges = set([head.strip() for head in self.allchanges.split(",")])
---
>             self.allchanges = \
>                 set([head.strip() for head in self.allchanges.split(",")])
121c165,166
<             self.mergediffs = set([head.strip() for head in self.mergediffs.split(",")])
---
>             self.mergediffs = \
>                 set([head.strip() for head in self.mergediffs.split(",")])
136c181,183
< 
---
>         '''
>         Parse command line arguments
>         '''
150c197,198
<                 parser.add_option("--%s" % name, action=action, dest=name, default=defval, help=help)
---
>                 parser.add_option("--%s" % name, action=action, dest=name,
>                     default=defval, help=help)
154c202,203
<                 parser.add_option("--%s" % name, action="store", type=type, default=defval, dest=name, help=help)
---
>                 parser.add_option("--%s" % name, action="store", type=type,
>                     default=defval, dest=name, help=help)
164a214,216
>         '''
>         Read users from configuration file
>         '''
177a230,232
>         '''
>         Return git configuration
>         '''
180a236,517
> class Colorer(object):
>     '''
>     Simple class that uses Pygments library to provide colorized
>     output (full HTML) for diffs.
>     '''
>     def __init__(self):
>         if pygments_available:
>             self.formatter = HtmlFormatter(linenos=True, full=True)
>             self.lexerobj  = DiffLexer()
> 
>     def formatDiff(self,data=None):
>         '''
>         Format diff
>         '''
>         self.data = data
>         if self.data:
>             try:
>                 self.result = highlight(self.data, self.lexerobj,
>                     self.formatter)
>             except:
>                 self.result = data
>         return self.result
> 
>     def colorizeFile(self, fname=None):
>         '''
>         Colorizes input file. Result is HTML.
>         '''
>         if fname and os.path.exists(fname):
>             _f = open(fname, 'r+b')
>             _data = _f.read()
>             _f.close()
>             return self.formatDiff(_data)
>         else:
>             return None
> 
> class PrettyHTML(object):
>     '''
>     Simple class to make 'git show' message look prettier
>     '''
>     def __init__(self):
>         self.keywords = ['commit', 'Author:', 'Date:']
>         # If True all next messages are not checked against keywords
>         self.keywords_trigger = False
>         # Contains additional tags before the commit message
>         self.extra_tags = ''
> 
>     def make_bold(self, keyword, line):
>         '''
>         Makes text bold
>         '''
>         if (re_search(keyword, line) != None) and \
>             (self.keywords_trigger == False):
>             if re_search(':', keyword) == None:
>                 replacement = '%s:' % keyword
>             else:
>                 replacement = keyword
>             line = line.replace(keyword, '<b>%s</b>' % replacement)
>             line = "<br>%s" % line
>         return line
> 
>     def convert(self, line):
>         '''
>         Convert 'git show' keywords
>         '''
>         replacements = 0
>         for keyword in self.keywords:
>             line_orig = line
>             line = self.make_bold(keyword, line)
>             if line != line_orig:
>                 replacements += 1
>         # No replacements were made, assume we have commit message
>         if replacements == 0:
>             if self.keywords_trigger == False:
>                 self.keywords_trigger = True
>                 self.extra_tags = '<br>'
>             else:
>                 # Only on-change lines should have extra tags
>                 self.extra_tags = ''
>             line = '%s<br><b>%s</b>' % (self.extra_tags, line)
>         return line
> 
> 
> class Mail(object):
>     '''
>     Simple class for notifications via SMTP
>     '''
>     def __init__(self, smtp_host, smtp_port, smtp_login,
>         smtp_password, smtp_usessl):
> 
>         self.smtp_host = smtp_host
>         self.smtp_port = smtp_port
>         self.smtp_login = smtp_login
>         self.smtp_password = smtp_password
>         self.smtp_usessl = smtp_usessl
>         # Create message container
>         # The correct MIME type is multipart/alternative.
>         self.msg = MIMEMultipart('alternative')
> 
> 
>     def addHeader(self, header, value, header_append=False):
>         '''
>         Adds message header
>         '''
>         # Verify presence of header
>         if self.msg[header]:
>             # Header already set, look out for recepient duplicates!
>             if not header_append:
>                 return False
>             del self.msg[header]
>         # Set message header
>         self.msg[header] = value
>         return True
> 
>     def addPart(self, content_type, content, encoding=None):
>         '''
>         Adds message part
>         '''
>         if encoding:
>             # Use specified encoding
>             part = MIMEText(content, content_type, encoding)
>         else:
>             # Fallback to us-ascii
>             part = MIMEText(content, content_type)
>         return part
> 
>     def attach(self, part):
>         '''
>         Attach message part
>         '''
>         self.msg.attach(part)
> 
>     def attachHtml(self, content):
>         '''
>         Attach HTML message
>         '''
>         part = self.addPart('html', content, 'utf8')
>         self.attach(part)
> 
>     def attachText(self, content):
>         '''
>         Attach text message
>         '''
>         part = self.addPart('plain', content)
>         self.attach(part)
> 
>     def getMessage(self):
>         '''
>         Return whole message (so far)
>         '''
>         return self.msg
> 
>     def send(self, smtp_sender, smtp_mailinglist, smtp_data):
>         '''
>         Send email via SMTP
>         '''
>         log("Sending email to %s" % smtp_mailinglist)
>         self.connection = smtplib.SMTP(self.smtp_host)
>         try:
>             # identify ourselves, prompting server for supported features
>             self.connection.ehlo()
> 
>             # Encrypt connection if both server supports it
>             # and self.smtp_usessl is True
>             if self.connection.has_extn('STARTTLS') and self.smtp_usessl:
>                 self.connection.starttls()
>                 # re-identify ourselves over TLS connection
>                 self.connection.ehlo()
> 
>             # Enable SMTP AUTH if both self.smtp_login and
>             # self.smtp_password are not empty.
>             if self.smtp_login and self.smtp_password:
>                 self.connection.login(self.smtp_login, self.smtp_password)
> 
>             # Send message
>             self.connection.sendmail(smtp_sender, smtp_mailinglist, smtp_data)
>         except:
>             # Status of message: delivery failed
>             return False
>         finally:
>             self.connection.quit()
>         # Status of message: delivery successful
>         return True
> 
> class MailWrapper(object):
>     '''
>     MailWrapper class provides high level interface to Mail class
>     '''
>     def __init__(self, mail_object):
>         self.mail = mail_object
>         self.text_message = ''
>         self.html_message = '<html>\n'
> 
>     def init(self, text='', html='<html>\n'):
>         '''
>         Start with reasonable defaults.
>         '''
>         self.text_message = text
>         self.html_message = html
> 
>     def sendFile(self, out, fname):
>         '''
>         Send file contents via SMTP
>         '''
>         out.close()
>         if Config.debug:
>             for line in open(fname):
>                 print "    |", line,
>             print ""
>         else:
>             _f = open(fname, 'r+b')
>             _data = _f.read()
>             _f.close()
>             self.mail.send(Config.sender, Config.mailinglist, _data)
> 
>     def generateMailHeader(self, subject):
>         '''
>         Generates mail header
>         '''
>         # TODO: This function should be called only once during run.
>         repo = _getRepo()
>         # Reply-To equals to sender, if not set.
>         replyto = 'Reply-To: %s\n' % \
>             Config.replyto if Config.replyto else Config.sender
>         if Config.altsubject:
>             subject = ('Repository: %s Branch: %s ' % \
>                 (re_sub('ssh://(.+)/', '',repo), subject))
> 
>         # Set message headers
>         self.mail.addHeader('From', Config.sender)
>         self.mail.addHeader('To', Config.mailinglist)
>         # Allow only 'Subject' header replacement.
>         self.mail.addHeader('Subject',
>             Config.emailprefix + subject, header_append=True)
>         self.mail.addHeader('Reply-To', replyto)
>         self.mail.addHeader('X-Git-Repository', repo)
>         self.mail.addHeader('X-Mailer', Name + ' ' + VERSION)
> 
> 
>     def addTag(self, key, value):
>         '''
>         Adds message tag
>         '''
>         if Config.colordiff:
>             formatted = '<br><b>%-11s:</b> %s' % (key, value)
>             self.addLine(formatted, html_only=True, start_br=False)
>         else:
>             formatted = '%-11s: %s' % (key, value)
>             self.addLine(formatted, text_only=True)
> 
>     def addLine(self, line, text_only=False, html_only=False, start_br=True):
>         '''
>         Adds message line
>         '''
>         if text_only:
>             self.text_message += line
>             return
>         if html_only:
>             if Config.colordiff:
>                 if start_br:
>                     self.html_message += '<br>%s' % line
>                 else:
>                     self.html_message += line
>             return
>         # TODO: DRY!!!
>         self.text_message += line
>         if Config.colordiff:
>             if start_br:
>                 self.html_message += '<br>%s' % line
>             else:
>                 self.html_message += line
> 
>     def getMessage(self):
>         '''
>         Returns whole message
>         '''
>         # Message parts should be always attached before returning the message.
>         self.mail.attachText(self.text_message)
>         if Config.colordiff:
>             self.mail.attachHtml(self.html_message)
>         return self.mail.getMessage()
> 
> 
200c537,538
<         child = subprocess.Popen("git " + args, shell=True, stdin=None, stdout=stdout_to, stderr=subprocess.PIPE)
---
>         child = subprocess.Popen("git " + args, shell=True, stdin=None,
>             stdout=stdout_to, stderr=subprocess.PIPE)
261,265c599
< def mailTag(key, value):
<     return "%-11s: %s" % (key, value)
< 
< def generateMailHeader(subject):
< 
---
> def _getRepo():
267d600
< 
269d601
< 
272c604,605
<             repo = "ssh://%s@%s/%s" % (whoami, Config.hostname, os.path.basename(os.getcwd()))
---
>             repo = "ssh://%s@%s/%s" % (whoami, Config.hostname,
>                 os.path.basename(os.getcwd()))
275,276c608,609
<             repo = "ssh://%s/%s" % (Config.hostname, os.path.basename(os.getcwd()))
< 
---
>             repo = "ssh://%s/%s" % (Config.hostname,
>                 os.path.basename(os.getcwd()))
278a612
>     return repo
280,314d613
<     (out, fname) = makeTmp()
< 
<     replyto = "Reply-To: %s\n" % Config.replyto if Config.replyto else ""
< 
<     print >>out, """From: %s
< To: %s
< Subject: %s %s
< %sX-Git-Repository: %s
< X-Mailer: %s %s
< 
< %s
< 
< """ % (Config.sender, Config.mailinglist, Config.emailprefix, subject, replyto, repo,
<        Name, VERSION, mailTag("Repository", repo)),
< 
<     return (out, fname)
< 
< def sendMail(out, fname):
<     out.close()
< 
<     if Config.debug:
<         for line in open(fname):
<             print "    |", line,
<         print ""
<     else:
<         stdin = subprocess.Popen("/usr/sbin/sendmail -t", shell=True, stdin=subprocess.PIPE).stdin
<         for line in open(fname):
<             print >>stdin, line,
<         stdin.close()
< 
<     # Wait a bit in case we're going to send more mails. Otherwise, the mails
<     # get sent back-to-back and are likely to end up with identical timestamps,
<     # which may then make them appear to have arrived in the wrong order.
<     if not Config.debug:
<         time.sleep(2)
317a617
>     (out, fname) = makeTmp()
319,324c619,628
<     (out, fname) = generateMailHeader("%s '%s' created" % (key, value))
< 
<     print >>out, mailTag("New %s" % key, value)
<     print >>out, mailTag("Referencing", rev)
< 
<     sendMail(out, fname)
---
>     # Start with empty message
>     message.init()
>     message.generateMailHeader("%s '%s' created" % (key, value))
> 
>     message.addTag("New %s" % key, value)
>     message.addTag("Referencing", rev)
> 
>     # print whole message to file
>     print >>out, message.getMessage()
>     message.sendFile(out, fname)
327a632
>     (out, fname) = makeTmp()
329,333c634,642
<     (out, fname) = generateMailHeader("%s '%s' deleted" % (key, value))
< 
<     print >>out, mailTag("Deleted %s" % key, value)
< 
<     sendMail(out, fname)
---
>     # Start with empty message
>     message.init()
>     message.generateMailHeader("%s '%s' deleted" % (key, value))
> 
>     message.addTag("Deleted %s" % key, value)
> 
>     # print whole message to file
>     print >>out, message.getMessage()
>     message.sendFile(out, fname)
338,339c647,655
< 
<     (out, fname) = generateMailHeader(subject)
---
>     repo = _getRepo()
>     # The 'git show' prettifier
>     prettyhtml = PrettyHTML()
>     # Start with empty message
>     message.init()
>     message.generateMailHeader(subject)
>     (out, fname) = makeTmp()
>     #
>     message.addTag("Repository", repo)
344c660
<     print >>out, mailTag("On branch%s" % multi, heads)
---
>     message.addTag("On branch%s" % multi, heads)
348c664
<         print >>out, mailTag("Link", url)
---
>         message.addTag("Link", url)
366d681
< 
368c683,684
<             footer = "\nDiff suppressed because of size. To see it, use:\n\n    git %s" % diff_cmd
---
>             footer = "\nDiff suppressed because of size.\n \
>                 To see it, use:\n\n    git %s" % diff_cmd
371c687,689
<     print >>out, Separator
---
>     message.addLine(Separator, text_only=True)
>     # Use nice <hr> in html mode
>     message.addLine(Separhtml, html_only=True)
375c693,694
<             print >>out, Separator
---
>             message.addLine(Separator, text_only=True)
>             message.addLine(Separhtml, html_only=True)
377c696,698
<             print >>out, line
---
>             message.addLine(line + "\n", text_only=True)
>             message.addLine(prettyhtml.convert(line),
>                 html_only=True, start_br=False)
379c700,701
<     print >>out, Separator
---
>     message.addLine(Separator, text_only=True)
>     message.addLine(Separhtml, html_only=True)
380a703
>     # Text only, read diff from file
383c706
<             print >>out, line,
---
>             message.addLine(line, text_only=True)
385c708,712
<     print >>out, footer
---
>     # HTML only, read and parse diff
>     if Config.colordiff and tname:
>         colorer = Colorer()
>         message.addLine(colorer.colorizeFile(tname),
>             html_only=True, start_br=False)
387,390c714,715
<     if Config.debug:
<         print >>out, "-- "
<         print >>out, "debug: show_cmd = git %s" % show_cmd
<         print >>out, "debug: diff_cmd = git %s" % diff_cmd
---
>     message.addLine(footer, text_only=True)
>     message.addLine(footer.replace("\n", "<br>\n"), html_only=True)
392c717,727
<     sendMail(out, fname)
---
>     if Config.debug:
>         message.addLine("-- ", text_only=True)
>         # Use nice <hr> in html mode
>         message.addLine(Separhtml, html_only=True)
>         # Both text and html
>         message.addLine("debug: show_cmd = git %s" % show_cmd)
>         message.addLine("debug: diff_cmd = git %s" % diff_cmd)
> 
>     # print whole message to file
>     print >>out, message.getMessage()
>     message.sendFile(out, fname)
398c733,734
<         log("Flagged revision %s for notification, but already reported this time" % rev)
---
>         log("Flagged revision %s for notification, \
>             but already reported this time" % rev)
417,418c753,756
<     show_cmd = "show -s --no-color --find-copies-harder --pretty=medium %s" % rev
<     diff_cmd = "diff-tree --patch-with-stat --no-color --find-copies-harder --ignore-space-at-eol %s %s" % (merge_diff, rev)
---
>     show_cmd = "show -s --no-color --find-copies-harder \
>         --pretty=medium %s" % rev
>     diff_cmd = "diff-tree --patch-with-stat --no-color --find-copies-harder \
>         --ignore-space-at-eol %s %s" % (merge_diff, rev)
439,440c777,780
<     show_cmd = "show -s --no-color --find-copies-harder --pretty=medium %s" % last
<     diff_cmd = "diff --patch-with-stat -m --no-color --find-copies-harder --ignore-space-at-eol %s %s" % (first, last)
---
>     show_cmd = "show -s --no-color --find-copies-harder \
>         --pretty=medium %s" % last
>     diff_cmd = "diff --patch-with-stat -m --no-color --find-copies-harder \
>         --ignore-space-at-eol %s %s" % (first, last)
469a810
>     (out, fname) = makeTmp()
473c814,816
<     (out, fname) = generateMailHeader("%s's head updated: %s" % (head, subject[0]))
---
>     # Start with empty message
>     message.init()
>     message.generateMailHeader("%s's head updated: %s" % (head, subject[0]))
475,476c818,819
<     print >>out, "Branch '%s' now includes:" % head
<     print >>out, ""
---
>     message.addLine("Branch '%s' now includes:" % head)
>     message.addLine("")
479c822,823
<         print >>out, "    ", git("show -s --pretty=oneline --abbrev-commit %s" % rev)[0]
---
>         message.addLine("    " +
>             str(git("show -s --pretty=oneline --abbrev-commit %s" % rev)[0]))
481c825,827
<     sendMail(out, fname)
---
>     # print whole message to file
>     print >>out, message.getMessage()
>     message.sendFile(out, fname)
484a831,835
> mail = Mail(Config.smtpserver, Config.smtpport,
>             Config.smtplogin, Config.smtppassword, Config.smtpssl)
> #
> message = MailWrapper(mail)
> 
561c912,913
<         path = git(["rev-list", "--reverse --date-order", new_rev, "^%s" % old_rev])
---
>         path = git(["rev-list",
>             "--reverse --date-order", new_rev, "^%s" % old_rev])
575a928
> 
