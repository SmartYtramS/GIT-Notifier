1c1
< #! /usr/bin/env python
---
> #!/usr/bin/env python
11a12,24
> import smtplib
> from re import sub as re_sub, search as re_search
> from email.mime.multipart import MIMEMultipart
> from email.mime.text import MIMEText
> 
> try:
>     from pygments import highlight
>     from pygments.lexers import DiffLexer
>     from pygments.formatters import HtmlFormatter
>     pygments_available = True
> except:
>     pygments_available = False
> 
16c29,30
< Separator = "\n>---------------------------------------------------------------\n"
---
> Separator = "\n>%s\n" % ('-' * 62)
> Separhtml = "<hr>"
19a34
> 
26a42
>     ("altsubject", False, False, "enables alternative subject with repository name"),
33c49,54
<     ("manual", True, None, "notifiy for a manually given set of revisions"),
---
>     ("smtpserver", True, 'localhost', "tells SMTP server to use, host only"),
>     ("smtpport", True, 25, "sets SMTP port for SMTP server"),
>     ("smtplogin", True, None, "sets login for SMTP AUTH"),
>     ("smtppassword", True, None, "sets password for SMTP AUTH"),
>     ("smtpssl", False, False, "enables SSL for SMTP"),
>     ("manual", True, None, "notify for a manually given set of revisions"),
34a56
>     ("colordiff", False, False, "colorize diffs using pygments library"),
45c67,68
< class State:
---
> 
> class State(object):
112c135
< class GitConfig:
---
> class GitConfig(object):
180a204,330
> class Colorer(object):
>     '''
>     Simple class that uses Pygments library to provide colorized
>     output (full HTML) for diffs.
>     '''
>     def __init__(self):
>         if pygments_available:
>             self.formatter = HtmlFormatter(linenos=True, full=True)
>             self.lexerobj  = DiffLexer()
> 
>     def format_diff(self,data=None):
>         self.data = data
>         if self.data:
>             try:
>                 self.result = highlight(self.data, self.lexerobj, self.formatter)
>             except:
>                 self.result = data
>         return self.result
> 
> class PrettyHTML(object):
>     '''
>     Simple class to make 'git show' message look prettier
>     '''
>     def __init__(self):
>         self.keywords = ['commit', 'Author:', 'Date:']
>         # If True all next messages are not checked against keywords
>         self.keywords_trigger = False
>         # Contains additional tags before the commit message
>         self.extra_tags = ''
> 
>     def make_bold(self, keyword, line):
>         if (re_search(keyword, line) != None) and (self.keywords_trigger == False):
>             if re_search(':', keyword) == None:
>                 replacement = '%s:' % keyword
>             else:
>                 replacement = keyword
>             line = line.replace(keyword, '<b>%s</b>' % replacement)
>             line = "<br>%s" % line
>         return line
> 
>     def convert(self, line):
>         replacements = 0
>         for keyword in self.keywords:
>             line_orig = line
>             line = self.make_bold(keyword, line)
>             if line != line_orig:
>                 replacements += 1
>         # No replacements were made, assume we have commit message
>         if replacements == 0:
>             if self.keywords_trigger == False:
>                 self.keywords_trigger = True
>                 self.extra_tags = '<br>'
>             else:
>                 # Only on-change lines should have extra tags
>                 self.extra_tags = ''
>             line = '%s<br><b>%s</b>' % (self.extra_tags, line)
>         return line
> 
> class Mail(object):
>     '''
>     Simple class for notifications via SMTP
>     '''
>     def __init__(self, smtp_host, smtp_port, smtp_login, smtp_password, smtp_usessl):
>         self.smtp_host = smtp_host
>         self.smtp_port = smtp_port
>         self.smtp_login = smtp_login
>         self.smtp_password = smtp_password
>         self.smtp_usessl = smtp_usessl
>         # Create message container - the correct MIME type is multipart/alternative.
>         self.msg = MIMEMultipart('alternative')
> 
> 
>     def addHeader(self, header,value):
>         # Set message headers
>         self.msg[header] = value
> 
>     def addPart(self, content_type, content, encoding=None):
>         if encoding:
>             # Use specified encoding
>             part = MIMEText(content, content_type, encoding)
>         else:
>             # Fallback to us-ascii
>             part = MIMEText(content, content_type)
>         return part
> 
>     def attach(self, part):
>         self.msg.attach(part)
> 
>     def attachHtml(self, content):
>         part = self.addPart('html', content, 'utf8')
>         self.attach(part)
> 
>     def attachText(self, content):
>         part = self.addPart('plain', content)
>         self.attach(part)
> 
>     def getMessage(self):
>         # Return whole message (so far)
>         return self.msg
> 
>     def send(self, smtp_sender, smtp_mailinglist, smtp_data):
>         log("Sending email to %s" % smtp_mailinglist)
>         self.connection = smtplib.SMTP(self.smtp_host)
>         try:
>             # identify ourselves, prompting server for supported features
>             self.connection.ehlo()
> 
>             # Encrypt connection if both server supports it and self.smtp_usessl is True
>             if self.connection.has_extn('STARTTLS') and self.smtp_usessl:
>                 self.connection.starttls()
>                 self.connection.ehlo() # re-identify ourselves over TLS connection
> 
>             # Enable SMTP AUTH if both self.smtp_login and self.smtp_password are not empty.
>             if self.smtp_login and self.smtp_password:
>                 self.connection.login(self.smtp_login, self.smtp_password)
> 
>             # Send message
>             self.connection.sendmail(smtp_sender, smtp_mailinglist, smtp_data)
>         except:
>              # Status of message: delivery failed
>              return False
>         finally:
>             self.connection.quit()
>         # Status of message: delivery successful
>         return True
> 
> 
261,265c411
< def mailTag(key, value):
<     return "%-11s: %s" % (key, value)
< 
< def generateMailHeader(subject):
< 
---
> def _getRepo():
267d412
< 
269d413
< 
276d419
< 
278a422
>     return repo
280,293c424,425
<     (out, fname) = makeTmp()
< 
<     replyto = "Reply-To: %s\n" % Config.replyto if Config.replyto else ""
< 
<     print >>out, """From: %s
< To: %s
< Subject: %s %s
< %sX-Git-Repository: %s
< X-Mailer: %s %s
< 
< %s
< 
< """ % (Config.sender, Config.mailinglist, Config.emailprefix, subject, replyto, repo,
<        Name, VERSION, mailTag("Repository", repo)),
---
> def mailTag(key, value):
>     return "%-11s: %s" % (key, value)
295c427,440
<     return (out, fname)
---
> def generateMailHeader(subject):
>     repo = _getRepo()
>     # Reply-To equals to sender, if not set.
>     replyto = "Reply-To: %s\n" % Config.replyto if Config.replyto else Config.sender
>     if Config.altsubject:
>         subject = ('Repository: %s Branch: %s ' % (re_sub('ssh://(.+)/', '',repo), subject))
> 
>     # Set message headers
>     mail.addHeader('From', Config.sender)
>     mail.addHeader('To', Config.mailinglist)
>     mail.addHeader('Subject', Config.emailprefix + subject)
>     mail.addHeader('Reply-To', replyto)
>     mail.addHeader('X-Git-Repository', repo)
>     mail.addHeader('X-Mailer', Name + ' ' + VERSION)
299d443
< 
305,308c449,452
<         stdin = subprocess.Popen("/usr/sbin/sendmail -t", shell=True, stdin=subprocess.PIPE).stdin
<         for line in open(fname):
<             print >>stdin, line,
<         stdin.close()
---
>         _f = open(fname, 'r+b')
>         _data = _f.read()
>         _f.close()
>         mail.send(Config.sender, Config.mailinglist, _data)
310,314d453
<     # Wait a bit in case we're going to send more mails. Otherwise, the mails
<     # get sent back-to-back and are likely to end up with identical timestamps,
<     # which may then make them appear to have arrived in the wrong order.
<     if not Config.debug:
<         time.sleep(2)
317a457,459
>     # Start with reasonable defaults.
>     text      = ""
>     html      = "<html>\n"
319c461,462
<     (out, fname) = generateMailHeader("%s '%s' created" % (key, value))
---
>     (out, fname) = makeTmp()
>     generateMailHeader("%s '%s' created" % (key, value))
321,322c464,472
<     print >>out, mailTag("New %s" % key, value)
<     print >>out, mailTag("Referencing", rev)
---
>     text += mailTag("New %s" % key, value)
>     text += mailTag("Referencing", rev)
>     if Config.colordiff:
>         html += mailTag("<b>New</b> %s" % key, value)
>         html += mailTag("<b>Referencing</b>", rev)
> 
>     mail.attachText(text)
>     if Config.colordiff:
>         mail.attachHtml(html)
323a474,475
>     # print whole message to file
>     print >>out, mail.getMessage()
327a480,484
>     # Start with reasonable defaults.
>     text      = ""
>     html      = "<html>\n"
>     (out, fname) = makeTmp()
>     generateMailHeader("%s '%s' deleted" % (key, value))
329,331c486,492
<     (out, fname) = generateMailHeader("%s '%s' deleted" % (key, value))
< 
<     print >>out, mailTag("Deleted %s" % key, value)
---
>     text += mailTag("Deleted %s" % key, value)
>     if Config.colordiff:
>         html += mailTag("<b>Deleted</b> %s" % key, value)
> 
>     mail.attachText(text)
>     if Config.colordiff:
>         mail.attachHtml(html)
332a494,495
>     # print whole message to file
>     print >>out, mail.getMessage()
338,339c501,512
< 
<     (out, fname) = generateMailHeader(subject)
---
>     # Start with reasonable defaults.
>     text      = ""
>     html      = "<html>\n"
>     repo = _getRepo()
>     # The 'git show' prettifier
>     prettyhtml = PrettyHTML()
>     generateMailHeader(subject)
>     (out, fname) = makeTmp()
>     #
>     text += mailTag("Repository", repo) + "\n"
>     if Config.colordiff:
>         html += "<br>%s" % mailTag("<b>Repository</b>", repo)
344c517,519
<     print >>out, mailTag("On branch%s" % multi, heads)
---
>     text += mailTag("On branch%s" % multi, heads)
>     if Config.colordiff:
>         html +="<br>%s" % mailTag("<b>On branch</b>%s" % multi, heads)
348c523,525
<         print >>out, mailTag("Link", url)
---
>         text += mailTag("Link", url)
>         if Config.colordiff:
>             html += "<br>%s" % mailTag("<b>Link</b>", url)
366d542
< 
368c544
<             footer = "\nDiff suppressed because of size. To see it, use:\n\n    git %s" % diff_cmd
---
>             footer = "\nDiff suppressed because of size.\n To see it, use:\n\n    git %s" % diff_cmd
371c547,550
<     print >>out, Separator
---
>     text += Separator
>     if Config.colordiff:
>         # Use nice <hr> in html mode
>         html += "<br>%s\n" % Separhtml
375c554,557
<             print >>out, Separator
---
>             text += Separator
>             if Config.colordiff:
>                 # Use nice <hr> in html mode
>                 html += "<br>%s\n" % Separhtml
377,379c559,565
<             print >>out, line
< 
<     print >>out, Separator
---
>             text += line + "\n"
>             if Config.colordiff:
>                 html += prettyhtml.convert(line)
> 
>     text += Separator
>     if Config.colordiff:
>         html += "<br>%s\n" % Separhtml
380a567
>     # Text only, read diff from file
383c570
<             print >>out, line,
---
>             text += line
385c572,582
<     print >>out, footer
---
>     # HTML only, read and parse diff
>     if Config.colordiff and tname:
>         colorer = Colorer()
>         _f = open(tname, 'r+b')
>         _data = _f.read()
>         _f.close()
>         html += colorer.format_diff(_data)
> 
>     text += footer
>     if Config.colordiff:
>         html += "<br>%s" % footer.replace("\n", "<br>\n")
388,390c585,596
<         print >>out, "-- "
<         print >>out, "debug: show_cmd = git %s" % show_cmd
<         print >>out, "debug: diff_cmd = git %s" % diff_cmd
---
>         text += "-- "
>         text += "debug: show_cmd = git %s" % show_cmd
>         text += "debug: diff_cmd = git %s" % diff_cmd
>         if Config.colordiff:
>             # Use nice <hr> in html mode
>             html += "<br>%s" % Separhtml
>             html += "<br>debug: show_cmd = git %s" % show_cmd
>             html += "<br>debug: diff_cmd = git %s" % diff_cmd
> 
>     mail.attachText(text)
>     if Config.colordiff:
>         mail.attachHtml(html)
391a598,599
>     # print whole message to file
>     print >>out, mail.getMessage()
469a678,681
>     # Start with reasonable defaults.
>     text      = ""
>     html      = "<html>\n"
>     (out, fname) = makeTmp()
473c685
<     (out, fname) = generateMailHeader("%s's head updated: %s" % (head, subject[0]))
---
>     generateMailHeader("%s's head updated: %s" % (head, subject[0]))
475,476c687,691
<     print >>out, "Branch '%s' now includes:" % head
<     print >>out, ""
---
>     text += "Branch '%s' now includes:" % head
>     text += ""
>     if Config.colordiff:
>         html += "<br><b>Branch</b> '%s' now includes:" % head
>         html += "<br>"
479c694,697
<         print >>out, "    ", git("show -s --pretty=oneline --abbrev-commit %s" % rev)[0]
---
>         text += "    " + str(git("show -s --pretty=oneline --abbrev-commit %s" % rev)[0])
>         if Config.colordiff:
>             html += "<br>" % str(git("show -s --pretty=oneline --abbrev-commit %s" % rev)[0])
> 
480a699,704
>     mail.attachText(text)
>     if Config.colordiff:
>         mail.attachHtml(html)
> 
>     # print whole message to file
>     print >>out, mail.getMessage()
483a708,710
> 
> mail = Mail(Config.smtpserver, Config.smtpport,
>             Config.smtplogin, Config.smtppassword, Config.smtpssl)
